[
  {
    "robot": "RoboticArm",
    "type": "start",
    "logic": "// Actuators Config - Allows users to select actuators\nconst actuator =['12kg','12kg', '12kg','12kg', '0.00001kg','0.00001kg'];\nconst gains=[5,5,5,2.5,20,25];\nlet Joints=[];\nconst noOfMotors=actuator.length;\nconst noOfJoints=4;\nfor(let i=0;i<noOfMotors;i++){\n\tJoints[i]=new ServoMotorsClass(i,gains[i],actuator[i]);\n}\nconst actions=new BlockClass();\n// ServoMotors Controller\nlet communication = setInterval(() => {\n\tconst angles=sensorData;\n\tif(angles){\n\t\tlet input = { motors: [] };\n\t\tfor(let i=0;i<noOfMotors;i++){\n\t\tinput.motors.push(Joints[i].Evaluate(angles['jointData'][i].angle));\n\t}\n\tconst formattedInput = JSON.stringify(input);\n\tlet robot = new ActuationClass(someVar, RoboticSystemName, formattedInput);\n\t\trobot.run();\n\t}\n}, 1000/40);\n\n",
    "executes": []
  },
  {
    "robot": "RoboticArm",
    "type": "move",
    "name": "Move Arm",
    "function": {
      "name": "MoveArm",
      "inputs": [
        { "variable": "x", "type": "number", "value": 0 },
        { "variable": "y", "type": "number", "value": 0 },
        { "variable": "z", "type": "number", "value": 0 }
      ],
      "logic": "const TargetAngles = actions.InverseKinematics(x, y, z);\nconst resolution = 1000/1;\nif (TargetAngles) {\n\tfor (let i = 0; i < noOfJoints; i++) {\n\t\tJoints[i].SetAngle(TargetAngles[i]);\n\t}\n}\nlet interval = setInterval(() => {\n\tlet Reached = true;\n\tfor (let i = 0; i < noOfJoints; i++) {\n\t\tconst error = Math.abs(TargetAngles[i] - sensorData.jointData[i].angle);\n\t\tif (error > 5) {\n\t\t\tReached = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t// Conditional statement to exit the promise\n\tif (Reached) {\n\t\tclearInterval(interval);\n\t\tresolve();\n\t}\n}, resolution);"
    }
  },
  {
    "robot": "RoboticArm",
    "type": "move",
    "name": "Open Claw",
    "function": {
      "name": "OpenClaw",
      "inputs": [{ "isOpen": true }],
      "logic": "const TargetAngles = isOpen ? [-20, 20] : [-0, 0];\nconst resolution = 1000/1;\nfor (let i = noOfJoints; i < noOfMotors; i++) {\n\tJoints[i].SetAngle(TargetAngles[i - noOfJoints]);\n}\nlet interval = setInterval(() => {\n\tlet Reached = true;\n\tfor (let i = 0; i < noOfMotors - noOfJoints; i++) {\n\t\tconst error = Math.abs(TargetAngles[i] - sensorData.jointData[i + noOfJoints].angle);\n\t\tif (error > 3) {\n\t\t\tReached = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t// Conditional statement to exit the promise\n\tif (Reached) {\n\t\tclearInterval(interval);\n\t\tresolve();\n\t}\n}, resolution);"
    }
  },
  {
    "robot": "RoboticArm",
    "type": "end",
    "executes": [ "clearInterval(communication);" ]
  }
]
